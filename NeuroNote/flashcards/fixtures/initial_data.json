[
{
  "model": "flashcards.deck",
  "pk": 1,
  "fields": {
    "title": "Calc 1",
    "subject": "No subject provided",
    "num_of_cards": 0,
    "user": 4
  }
},
{
  "model": "flashcards.deck",
  "pk": 4,
  "fields": {
    "title": "Cultural Studies",
    "subject": "No subject provided",
    "num_of_cards": 0,
    "user": 4
  }
},
{
  "model": "flashcards.deck",
  "pk": 5,
  "fields": {
    "title": "Something",
    "subject": "No subject provided",
    "num_of_cards": 0,
    "user": 4
  }
},
{
  "model": "flashcards.deck",
  "pk": 6,
  "fields": {
    "title": "hi",
    "subject": "No subject provided",
    "num_of_cards": 0,
    "user": 4
  }
},
{
  "model": "flashcards.deck",
  "pk": 7,
  "fields": {
    "title": "hwi",
    "subject": "No subject provided",
    "num_of_cards": 0,
    "user": 4
  }
},
{
  "model": "flashcards.deck",
  "pk": 10,
  "fields": {
    "title": "Testing",
    "subject": "No subject provided",
    "num_of_cards": 0,
    "user": 4
  }
},
{
  "model": "flashcards.deck",
  "pk": 12,
  "fields": {
    "title": "Derivatives",
    "subject": "Calc 1",
    "num_of_cards": 0,
    "user": 3
  }
},
{
  "model": "flashcards.deck",
  "pk": 13,
  "fields": {
    "title": "How to pimp a butterly",
    "subject": "No subject provided",
    "num_of_cards": 0,
    "user": 9
  }
},
{
  "model": "flashcards.deck",
  "pk": 14,
  "fields": {
    "title": "Cooking 101",
    "subject": "No subject provided",
    "num_of_cards": 0,
    "user": 9
  }
},
{
  "model": "flashcards.deck",
  "pk": 15,
  "fields": {
    "title": "Bacon Feuticune",
    "subject": "No subject provided",
    "num_of_cards": 0,
    "user": 9
  }
},
{
  "model": "flashcards.deck",
  "pk": 16,
  "fields": {
    "title": "White Macaroni",
    "subject": "Cooking 101",
    "num_of_cards": 0,
    "user": 9
  }
},
{
  "model": "flashcards.deck",
  "pk": 17,
  "fields": {
    "title": "OOP",
    "subject": "Python 101",
    "num_of_cards": 0,
    "user": 9
  }
},
{
  "model": "flashcards.deck",
  "pk": 18,
  "fields": {
    "title": "Budisim",
    "subject": "Religion 315",
    "num_of_cards": 0,
    "user": 9
  }
},
{
  "model": "flashcards.deck",
  "pk": 19,
  "fields": {
    "title": "Critical Arts",
    "subject": "Visual Literacy",
    "num_of_cards": 0,
    "user": 9
  }
},
{
  "model": "flashcards.deck",
  "pk": 20,
  "fields": {
    "title": "Biceps",
    "subject": "Kineseology",
    "num_of_cards": 0,
    "user": 9
  }
},
{
  "model": "flashcards.deck",
  "pk": 21,
  "fields": {
    "title": "Nutrition",
    "subject": "Kineseology",
    "num_of_cards": 0,
    "user": 9
  }
},
{
  "model": "flashcards.deck",
  "pk": 22,
  "fields": {
    "title": "Turmoil",
    "subject": "Kineseology",
    "num_of_cards": 0,
    "user": 9
  }
},
{
  "model": "flashcards.deck",
  "pk": 23,
  "fields": {
    "title": "Chicken",
    "subject": "Kineseology",
    "num_of_cards": 0,
    "user": 9
  }
},
{
  "model": "flashcards.deck",
  "pk": 26,
  "fields": {
    "title": "Definitions",
    "subject": "Cultural Studies",
    "num_of_cards": 20,
    "user": 10
  }
},
{
  "model": "flashcards.deck",
  "pk": 27,
  "fields": {
    "title": "Solidify Knowledge",
    "subject": "Django",
    "num_of_cards": 15,
    "user": 10
  }
},
{
  "model": "flashcards.deck",
  "pk": 28,
  "fields": {
    "title": "More info",
    "subject": "django",
    "num_of_cards": 17,
    "user": 10
  }
},
{
  "model": "flashcards.card",
  "pk": 1,
  "fields": {
    "question": "What is 2+2?",
    "answer": "4",
    "card_deck": 1,
    "repetitions": 0,
    "difficulty": 5.0,
    "stability": 1.0,
    "learning_status": "In progress",
    "last_review_date": null,
    "scheduled_date": null
  }
},
{
  "model": "flashcards.card",
  "pk": 2,
  "fields": {
    "question": "What is 2+2?",
    "answer": "4",
    "card_deck": 1,
    "repetitions": 0,
    "difficulty": 5.0,
    "stability": 1.0,
    "learning_status": "In progress",
    "last_review_date": null,
    "scheduled_date": null
  }
},
{
  "model": "flashcards.card",
  "pk": 3,
  "fields": {
    "question": "What is 2+2?",
    "answer": "4",
    "card_deck": 1,
    "repetitions": 0,
    "difficulty": 5.0,
    "stability": 1.0,
    "learning_status": "In progress",
    "last_review_date": null,
    "scheduled_date": null
  }
},
{
  "model": "flashcards.card",
  "pk": 4,
  "fields": {
    "question": "What is 2+2?",
    "answer": "4",
    "card_deck": 4,
    "repetitions": 0,
    "difficulty": 5.0,
    "stability": 1.0,
    "learning_status": "In progress",
    "last_review_date": null,
    "scheduled_date": null
  }
},
{
  "model": "flashcards.card",
  "pk": 5,
  "fields": {
    "question": "What is 2+2?",
    "answer": "4",
    "card_deck": 4,
    "repetitions": 0,
    "difficulty": 5.0,
    "stability": 1.0,
    "learning_status": "In progress",
    "last_review_date": null,
    "scheduled_date": null
  }
},
{
  "model": "flashcards.card",
  "pk": 6,
  "fields": {
    "question": "What is 2+2?",
    "answer": "4",
    "card_deck": 4,
    "repetitions": 0,
    "difficulty": 5.0,
    "stability": 1.0,
    "learning_status": "In progress",
    "last_review_date": null,
    "scheduled_date": null
  }
},
{
  "model": "flashcards.card",
  "pk": 7,
  "fields": {
    "question": "What is 2+2?",
    "answer": "4",
    "card_deck": 4,
    "repetitions": 0,
    "difficulty": 5.0,
    "stability": 1.0,
    "learning_status": "In progress",
    "last_review_date": null,
    "scheduled_date": null
  }
},
{
  "model": "flashcards.card",
  "pk": 8,
  "fields": {
    "question": "What is 2+2?",
    "answer": "4",
    "card_deck": 4,
    "repetitions": 0,
    "difficulty": 5.0,
    "stability": 1.0,
    "learning_status": "In progress",
    "last_review_date": null,
    "scheduled_date": null
  }
},
{
  "model": "flashcards.card",
  "pk": 9,
  "fields": {
    "question": "What is 2+3?",
    "answer": "5",
    "card_deck": 4,
    "repetitions": 0,
    "difficulty": 5.0,
    "stability": 1.0,
    "learning_status": "In progress",
    "last_review_date": null,
    "scheduled_date": null
  }
},
{
  "model": "flashcards.card",
  "pk": 10,
  "fields": {
    "question": "What is 2+5?",
    "answer": "5",
    "card_deck": 4,
    "repetitions": 0,
    "difficulty": 5.0,
    "stability": 1.0,
    "learning_status": "In progress",
    "last_review_date": null,
    "scheduled_date": null
  }
},
{
  "model": "flashcards.card",
  "pk": 11,
  "fields": {
    "question": "What is 3+5?",
    "answer": "5",
    "card_deck": 4,
    "repetitions": 0,
    "difficulty": 5.0,
    "stability": 1.0,
    "learning_status": "In progress",
    "last_review_date": null,
    "scheduled_date": null
  }
},
{
  "model": "flashcards.card",
  "pk": 12,
  "fields": {
    "question": "What is 4+5?",
    "answer": "5",
    "card_deck": 4,
    "repetitions": 0,
    "difficulty": 5.0,
    "stability": 1.0,
    "learning_status": "In progress",
    "last_review_date": null,
    "scheduled_date": null
  }
},
{
  "model": "flashcards.card",
  "pk": 13,
  "fields": {
    "question": "What is 5+5?",
    "answer": "10",
    "card_deck": 4,
    "repetitions": 0,
    "difficulty": 5.0,
    "stability": 1.0,
    "learning_status": "In progress",
    "last_review_date": null,
    "scheduled_date": null
  }
},
{
  "model": "flashcards.card",
  "pk": 14,
  "fields": {
    "question": "Whats subjectivity?",
    "answer": "Idk its something tho",
    "card_deck": 4,
    "repetitions": 0,
    "difficulty": 5.0,
    "stability": 1.0,
    "learning_status": "In progress",
    "last_review_date": null,
    "scheduled_date": null
  }
},
{
  "model": "flashcards.card",
  "pk": 15,
  "fields": {
    "question": "Whats subjectisvity?",
    "answer": "Idk its something tho",
    "card_deck": 4,
    "repetitions": 0,
    "difficulty": 5.0,
    "stability": 1.0,
    "learning_status": "In progress",
    "last_review_date": null,
    "scheduled_date": null
  }
},
{
  "model": "flashcards.card",
  "pk": 24,
  "fields": {
    "question": "Whats kendrick lamar's best album",
    "answer": "Good Kid M.A.A.D City",
    "card_deck": 12,
    "repetitions": 81,
    "difficulty": 6.099999999999999,
    "stability": 1.1520312087880366e-05,
    "learning_status": "In progress",
    "last_review_date": "2025-04-30T00:00:00Z",
    "scheduled_date": "2025-05-01T00:00:00Z"
  }
},
{
  "model": "flashcards.card",
  "pk": 27,
  "fields": {
    "question": "Who's the best artist alive?",
    "answer": "The Weeknd",
    "card_deck": 13,
    "repetitions": 1,
    "difficulty": 4.7,
    "stability": 1.6,
    "learning_status": "In progress",
    "last_review_date": "2025-04-30T00:00:00Z",
    "scheduled_date": "2025-05-09T00:00:00Z"
  }
},
{
  "model": "flashcards.card",
  "pk": 28,
  "fields": {
    "question": "What 0 + 2?",
    "answer": "2",
    "card_deck": 13,
    "repetitions": 1,
    "difficulty": 5.2,
    "stability": 0.7,
    "learning_status": "In progress",
    "last_review_date": "2025-04-30T00:00:00Z",
    "scheduled_date": "2025-05-05T00:00:00Z"
  }
},
{
  "model": "flashcards.card",
  "pk": 49,
  "fields": {
    "question": "What is cultural studies?",
    "answer": "Cultural studies is an interdisciplinary field that examines how culture is created, shaped, and influenced by social, political, and economic forces. It analyzes cultural practices, texts, and representations while focusing on issues of power, identity, and meaning.",
    "card_deck": 26,
    "repetitions": 1,
    "difficulty": 5.1,
    "stability": 1.2,
    "learning_status": "In Progress",
    "last_review_date": "2025-06-30T00:00:00Z",
    "scheduled_date": "2025-07-07T00:00:00Z"
  }
},
{
  "model": "flashcards.card",
  "pk": 50,
  "fields": {
    "question": "What is hegemony in cultural studies?",
    "answer": "Hegemony refers to the dominance of one social group over others, achieved through a combination of coercion and consent rather than force alone. It describes how dominant ideologies become accepted as common sense or natural, even by those who are disadvantaged by them.",
    "card_deck": 26,
    "repetitions": 2,
    "difficulty": 5.4,
    "stability": 0.48999999999999994,
    "learning_status": "In Progress",
    "last_review_date": "2025-07-01T00:00:00Z",
    "scheduled_date": "2025-07-02T00:00:00Z"
  }
},
{
  "model": "flashcards.card",
  "pk": 51,
  "fields": {
    "question": "What is meant by \"encoding/decoding\"?",
    "answer": "Encoding/decoding is Stuart Hall's model that describes how media messages are produced (encoded) and interpreted (decoded). It suggests audiences are active in interpreting messages according to their social position and may accept, negotiate, or oppose the intended meaning.",
    "card_deck": 26,
    "repetitions": 2,
    "difficulty": 5.3,
    "stability": 0.9994631543659326,
    "learning_status": "In Progress",
    "last_review_date": "2025-07-01T00:00:00Z",
    "scheduled_date": "2025-07-07T00:00:00Z"
  }
},
{
  "model": "flashcards.card",
  "pk": 52,
  "fields": {
    "question": "What is cultural capital?",
    "answer": "Cultural capital is Pierre Bourdieu's concept referring to non-financial social assets that promote social mobility beyond economic means, such as education, intellect, style of speech, dress, or physical appearance. It exists in embodied, objectified, and institutionalized forms.",
    "card_deck": 26,
    "repetitions": 2,
    "difficulty": 5.4,
    "stability": 0.48999999999999994,
    "learning_status": "In Progress",
    "last_review_date": "2025-07-01T00:00:00Z",
    "scheduled_date": "2025-07-02T00:00:00Z"
  }
},
{
  "model": "flashcards.card",
  "pk": 53,
  "fields": {
    "question": "What is the \"circuit of culture\"?",
    "answer": "The circuit of culture is a theoretical model that explains how cultural meaning is produced, circulated, and consumed through five interconnected processes: representation, identity, production, consumption, and regulation.",
    "card_deck": 26,
    "repetitions": 2,
    "difficulty": 5.4,
    "stability": 0.48999999999999994,
    "learning_status": "In Progress",
    "last_review_date": "2025-07-01T00:00:00Z",
    "scheduled_date": "2025-07-02T00:00:00Z"
  }
},
{
  "model": "flashcards.card",
  "pk": 54,
  "fields": {
    "question": "What is hybridity in cultural studies?",
    "answer": "Hybridity refers to the mixing of different cultural elements to create new cultural forms and identities. It challenges essentialist notions of culture and emphasizes how cultures are constantly evolving through contact, exchange, and appropriation.",
    "card_deck": 26,
    "repetitions": 2,
    "difficulty": 5.4,
    "stability": 0.48999999999999994,
    "learning_status": "In Progress",
    "last_review_date": "2025-07-01T00:00:00Z",
    "scheduled_date": "2025-07-02T00:00:00Z"
  }
},
{
  "model": "flashcards.card",
  "pk": 55,
  "fields": {
    "question": "What is the culture industry?",
    "answer": "The culture industry is a concept developed by Theodor Adorno and Max Horkheimer that describes how cultural goods are mass-produced and standardized under capitalism, turning culture into a commodity and potentially limiting critical thought and authentic cultural expression.",
    "card_deck": 26,
    "repetitions": 2,
    "difficulty": 5.4,
    "stability": 0.48999999999999994,
    "learning_status": "In Progress",
    "last_review_date": "2025-07-01T00:00:00Z",
    "scheduled_date": "2025-07-02T00:00:00Z"
  }
},
{
  "model": "flashcards.card",
  "pk": 56,
  "fields": {
    "question": "What is representation in cultural studies?",
    "answer": "Representation refers to how meaning is produced through language, images, and other signifying practices. It examines how different groups are portrayed in cultural texts and how these portrayals shape perceptions and reinforce or challenge power relations.",
    "card_deck": 26,
    "repetitions": 2,
    "difficulty": 5.4,
    "stability": 0.48999999999999994,
    "learning_status": "In Progress",
    "last_review_date": "2025-07-01T00:00:00Z",
    "scheduled_date": "2025-07-02T00:00:00Z"
  }
},
{
  "model": "flashcards.card",
  "pk": 57,
  "fields": {
    "question": "What is intersectionality?",
    "answer": "Intersectionality is a theoretical framework that recognizes how different aspects of social and political identity (gender, race, class, sexuality, disability, etc.) combine to create unique modes of discrimination or privilege. It emphasizes that oppression operates through multiple, interconnected systems.",
    "card_deck": 26,
    "repetitions": 2,
    "difficulty": 5.4,
    "stability": 0.48999999999999994,
    "learning_status": "In Progress",
    "last_review_date": "2025-07-01T00:00:00Z",
    "scheduled_date": "2025-07-02T00:00:00Z"
  }
},
{
  "model": "flashcards.card",
  "pk": 58,
  "fields": {
    "question": "What is a moral panic?",
    "answer": "A moral panic is a widespread fear, often fueled by media coverage, that some cultural phenomenon or group poses a threat to societal values. It typically involves stereotyping, exaggeration, and calls for greater social control or regulation.",
    "card_deck": 26,
    "repetitions": 2,
    "difficulty": 5.4,
    "stability": 0.48999999999999994,
    "learning_status": "In Progress",
    "last_review_date": "2025-07-01T00:00:00Z",
    "scheduled_date": "2025-07-02T00:00:00Z"
  }
},
{
  "model": "flashcards.card",
  "pk": 59,
  "fields": {
    "question": "What is a QuerySet in Django?",
    "answer": "A QuerySet is a collection of database queries in Django that can be used to retrieve, filter, and manipulate data from the database. It represents a SQL query and can be refined by adding filters and conditions.",
    "card_deck": 27,
    "repetitions": 1,
    "difficulty": 4.9,
    "stability": 1.4,
    "learning_status": "In Progress",
    "last_review_date": "2025-06-30T00:00:00Z",
    "scheduled_date": "2025-07-08T00:00:00Z"
  }
},
{
  "model": "flashcards.card",
  "pk": 60,
  "fields": {
    "question": "How do you combine multiple conditions in a filter using Django's ORM?",
    "answer": "You can combine multiple conditions in a filter by either chaining multiple filter() calls, passing multiple arguments to a single filter() call, or using Q objects for more complex queries.",
    "card_deck": 27,
    "repetitions": 1,
    "difficulty": 5.0,
    "stability": 1.3,
    "learning_status": "In Progress",
    "last_review_date": "2025-06-30T00:00:00Z",
    "scheduled_date": "2025-07-08T00:00:00Z"
  }
},
{
  "model": "flashcards.card",
  "pk": 61,
  "fields": {
    "question": "What is a Q object in Django?",
    "answer": "A Q object is a class in Django that encapsulates a SQL expression in a Python object. It allows for complex queries with OR, AND, and NOT operations when filtering querysets.",
    "card_deck": 27,
    "repetitions": 1,
    "difficulty": 5.1,
    "stability": 1.2,
    "learning_status": "In Progress",
    "last_review_date": "2025-06-30T00:00:00Z",
    "scheduled_date": "2025-07-07T00:00:00Z"
  }
},
{
  "model": "flashcards.card",
  "pk": 62,
  "fields": {
    "question": "How do you import Q objects in Django?",
    "answer": "from django.db.models import Q",
    "card_deck": 27,
    "repetitions": 1,
    "difficulty": 4.7,
    "stability": 1.6,
    "learning_status": "In Progress",
    "last_review_date": "2025-06-30T00:00:00Z",
    "scheduled_date": "2025-07-09T00:00:00Z"
  }
},
{
  "model": "flashcards.card",
  "pk": 63,
  "fields": {
    "question": "How do you create an OR condition using Q objects?",
    "answer": "Use the | (pipe) operator between Q objects: Model.objects.filter(Q(condition1) | Q(condition2))",
    "card_deck": 27,
    "repetitions": 1,
    "difficulty": 4.8,
    "stability": 1.5,
    "learning_status": "In Progress",
    "last_review_date": "2025-06-30T00:00:00Z",
    "scheduled_date": "2025-07-09T00:00:00Z"
  }
},
{
  "model": "flashcards.card",
  "pk": 64,
  "fields": {
    "question": "How do you create an AND condition using Q objects?",
    "answer": "Use the & (ampersand) operator between Q objects: Model.objects.filter(Q(condition1) & Q(condition2))",
    "card_deck": 27,
    "repetitions": 2,
    "difficulty": 5.3,
    "stability": 0.9994631543659326,
    "learning_status": "In Progress",
    "last_review_date": "2025-07-01T00:00:00Z",
    "scheduled_date": "2025-07-07T00:00:00Z"
  }
},
{
  "model": "flashcards.card",
  "pk": 65,
  "fields": {
    "question": "How do you negate a condition using Q objects?",
    "answer": "Use the ~ (tilde) operator before a Q object: Model.objects.filter(~Q(condition))",
    "card_deck": 27,
    "repetitions": 2,
    "difficulty": 5.4,
    "stability": 0.48999999999999994,
    "learning_status": "In Progress",
    "last_review_date": "2025-07-01T00:00:00Z",
    "scheduled_date": "2025-07-02T00:00:00Z"
  }
},
{
  "model": "flashcards.card",
  "pk": 66,
  "fields": {
    "question": "What is the difference between using filter().filter() and using & with Q objects?",
    "answer": "filter().filter() creates an AND condition implicitly, while Q objects with & allow for more complex combinations including nested conditions and mixed AND/OR operations.",
    "card_deck": 27,
    "repetitions": 1,
    "difficulty": 5.1,
    "stability": 1.2,
    "learning_status": "In Progress",
    "last_review_date": "2025-06-30T00:00:00Z",
    "scheduled_date": "2025-07-07T00:00:00Z"
  }
},
{
  "model": "flashcards.card",
  "pk": 67,
  "fields": {
    "question": "How do you perform a queryset union in Django?",
    "answer": "Use the union() method: queryset1.union(queryset2)",
    "card_deck": 27,
    "repetitions": 2,
    "difficulty": 5.4,
    "stability": 0.48999999999999994,
    "learning_status": "In Progress",
    "last_review_date": "2025-07-01T00:00:00Z",
    "scheduled_date": "2025-07-02T00:00:00Z"
  }
},
{
  "model": "flashcards.card",
  "pk": 68,
  "fields": {
    "question": "What are the requirements for using union() with querysets?",
    "answer": "The querysets must be from the same model or return the same fields in the same order.",
    "card_deck": 27,
    "repetitions": 2,
    "difficulty": 5.4,
    "stability": 0.48999999999999994,
    "learning_status": "In Progress",
    "last_review_date": "2025-07-01T00:00:00Z",
    "scheduled_date": "2025-07-02T00:00:00Z"
  }
},
{
  "model": "flashcards.card",
  "pk": 69,
  "fields": {
    "question": "What other set operations are available for querysets besides union()?",
    "answer": "intersection(), difference(), and union() which correspond to SQL's INTERSECT, EXCEPT, and UNION operations.",
    "card_deck": 27,
    "repetitions": 2,
    "difficulty": 5.4,
    "stability": 0.48999999999999994,
    "learning_status": "In Progress",
    "last_review_date": "2025-07-01T00:00:00Z",
    "scheduled_date": "2025-07-02T00:00:00Z"
  }
},
{
  "model": "flashcards.card",
  "pk": 70,
  "fields": {
    "question": "How do you control duplicate results in a union operation?",
    "answer": "By default, union() removes duplicates (like SQL's UNION DISTINCT). To keep duplicates, use union(all=True) which is equivalent to SQL's UNION ALL.",
    "card_deck": 27,
    "repetitions": 2,
    "difficulty": 5.4,
    "stability": 0.48999999999999994,
    "learning_status": "In Progress",
    "last_review_date": "2025-07-01T00:00:00Z",
    "scheduled_date": "2025-07-02T00:00:00Z"
  }
},
{
  "model": "flashcards.card",
  "pk": 71,
  "fields": {
    "question": "What is the syntax for combining multiple Q objects with AND and OR operations?",
    "answer": "Model.objects.filter(Q(condition1) & (Q(condition2) | Q(condition3)))",
    "card_deck": 27,
    "repetitions": 2,
    "difficulty": 5.4,
    "stability": 0.48999999999999994,
    "learning_status": "In Progress",
    "last_review_date": "2025-07-01T00:00:00Z",
    "scheduled_date": "2025-07-02T00:00:00Z"
  }
},
{
  "model": "flashcards.card",
  "pk": 72,
  "fields": {
    "question": "Can you mix Q objects with regular keyword arguments in a filter?",
    "answer": "Yes, you can combine Q objects with regular keyword arguments. The keyword arguments are implicitly ANDed with the Q objects: Model.objects.filter(Q(condition1) | Q(condition2), condition3=value)",
    "card_deck": 27,
    "repetitions": 2,
    "difficulty": 5.4,
    "stability": 0.48999999999999994,
    "learning_status": "In Progress",
    "last_review_date": "2025-07-01T00:00:00Z",
    "scheduled_date": "2025-07-02T00:00:00Z"
  }
},
{
  "model": "flashcards.card",
  "pk": 73,
  "fields": {
    "question": "What is the order of operations for Q objects with bitwise operators?",
    "answer": "The order follows Python's operator precedence: & (AND) has higher precedence than | (OR). Use parentheses to control the grouping of operations.",
    "card_deck": 27,
    "repetitions": 2,
    "difficulty": 5.4,
    "stability": 0.48999999999999994,
    "learning_status": "In Progress",
    "last_review_date": "2025-07-01T00:00:00Z",
    "scheduled_date": "2025-07-02T00:00:00Z"
  }
},
{
  "model": "flashcards.card",
  "pk": 74,
  "fields": {
    "question": "What are regressions?",
    "answer": "Regressions are bugs that occur when a feature that used to work breaks after you make a change to your code.\n",
    "card_deck": 26,
    "repetitions": 2,
    "difficulty": 5.4,
    "stability": 0.48999999999999994,
    "learning_status": "In Progress",
    "last_review_date": "2025-07-01T00:00:00Z",
    "scheduled_date": "2025-07-02T00:00:00Z"
  }
},
{
  "model": "flashcards.card",
  "pk": 75,
  "fields": {
    "question": "What are CI/CD (Continuous Integration / Continuous Deployment (or delivery)) pipelines?",
    "answer": "They automate the process of, building, testing, and deploying your code.\n\nCI (Continuous Integration): Catch bugs early, before merging or deploying\nCD (Continuous Delivery or Deployment): Ship new features or fixes safely and frequently without manual steps",
    "card_deck": 26,
    "repetitions": 2,
    "difficulty": 5.4,
    "stability": 0.48999999999999994,
    "learning_status": "In Progress",
    "last_review_date": "2025-07-01T00:00:00Z",
    "scheduled_date": "2025-07-02T00:00:00Z"
  }
},
{
  "model": "flashcards.card",
  "pk": 76,
  "fields": {
    "question": "What is the difference between a list and a tuple in Python?",
    "answer": "Lists are mutable (can be changed after creation), while tuples are immutable (cannot be changed after creation). Lists use square brackets [], tuples use parentheses ().",
    "card_deck": 28,
    "repetitions": 1,
    "difficulty": 4.7,
    "stability": 1.6,
    "learning_status": "In Progress",
    "last_review_date": "2025-06-30T00:00:00Z",
    "scheduled_date": "2025-07-09T00:00:00Z"
  }
},
{
  "model": "flashcards.card",
  "pk": 77,
  "fields": {
    "question": "Explain Python's memory management.",
    "answer": "Python uses automatic memory management with garbage collection. It allocates memory for objects, tracks references through reference counting, and frees memory when objects are no longer referenced.",
    "card_deck": 28,
    "repetitions": 2,
    "difficulty": 5.4,
    "stability": 0.48999999999999994,
    "learning_status": "In Progress",
    "last_review_date": "2025-07-01T00:00:00Z",
    "scheduled_date": "2025-07-02T00:00:00Z"
  }
},
{
  "model": "flashcards.card",
  "pk": 78,
  "fields": {
    "question": "What are Python decorators?",
    "answer": "Decorators are functions that modify the behavior of other functions or methods. They use the @decorator syntax and allow for adding functionality to existing code without modifying its structure.",
    "card_deck": 28,
    "repetitions": 1,
    "difficulty": 5.0,
    "stability": 1.3,
    "learning_status": "In Progress",
    "last_review_date": "2025-06-30T00:00:00Z",
    "scheduled_date": "2025-07-08T00:00:00Z"
  }
},
{
  "model": "flashcards.card",
  "pk": 79,
  "fields": {
    "question": "What is a generator in Python?",
    "answer": "A generator is a function that returns an iterator using the yield keyword. It generates values one at a time and only when requested, making it memory-efficient for large datasets.",
    "card_deck": 28,
    "repetitions": 2,
    "difficulty": 5.4,
    "stability": 0.48999999999999994,
    "learning_status": "In Progress",
    "last_review_date": "2025-07-01T00:00:00Z",
    "scheduled_date": "2025-07-02T00:00:00Z"
  }
},
{
  "model": "flashcards.card",
  "pk": 80,
  "fields": {
    "question": "Explain list comprehensions in Python.",
    "answer": "List comprehensions provide a concise way to create lists based on existing sequences. Syntax: [expression for item in iterable if condition]. They're more readable and often faster than traditional for loops.",
    "card_deck": 28,
    "repetitions": 1,
    "difficulty": 4.9,
    "stability": 1.4,
    "learning_status": "In Progress",
    "last_review_date": "2025-06-30T00:00:00Z",
    "scheduled_date": "2025-07-08T00:00:00Z"
  }
},
{
  "model": "flashcards.card",
  "pk": 81,
  "fields": {
    "question": "What's the difference between `__str__` and `__repr__` in Python?",
    "answer": "`__str__` returns a human-readable string representation meant for end users. `__repr__` returns a string representation meant for developers, ideally containing information to recreate the object.",
    "card_deck": 28,
    "repetitions": 2,
    "difficulty": 5.3,
    "stability": 0.9994631543659326,
    "learning_status": "In Progress",
    "last_review_date": "2025-07-01T00:00:00Z",
    "scheduled_date": "2025-07-07T00:00:00Z"
  }
},
{
  "model": "flashcards.card",
  "pk": 82,
  "fields": {
    "question": "What are Python context managers and the `with` statement?",
    "answer": "Context managers handle resource allocation and cleanup. The `with` statement simplifies try/finally patterns. Common uses include file operations and database connections to ensure proper cleanup.",
    "card_deck": 28,
    "repetitions": 2,
    "difficulty": 5.4,
    "stability": 0.48999999999999994,
    "learning_status": "In Progress",
    "last_review_date": "2025-07-01T00:00:00Z",
    "scheduled_date": "2025-07-02T00:00:00Z"
  }
},
{
  "model": "flashcards.card",
  "pk": 83,
  "fields": {
    "question": "Explain the GIL (Global Interpreter Lock) in Python.",
    "answer": "The GIL is a mutex that protects access to Python objects, preventing multiple native threads from executing Python bytecode simultaneously. It makes multi-threaded CPU-bound programs often slower than single-threaded ones.",
    "card_deck": 28,
    "repetitions": 2,
    "difficulty": 5.4,
    "stability": 0.48999999999999994,
    "learning_status": "In Progress",
    "last_review_date": "2025-07-01T00:00:00Z",
    "scheduled_date": "2025-07-02T00:00:00Z"
  }
},
{
  "model": "flashcards.card",
  "pk": 84,
  "fields": {
    "question": "What are Python's data classes?",
    "answer": "Introduced in Python 3.7, data classes automatically generate special methods like `__init__` and `__repr__` for classes that primarily store data. They reduce boilerplate code using the @dataclass decorator.",
    "card_deck": 28,
    "repetitions": 2,
    "difficulty": 5.4,
    "stability": 0.48999999999999994,
    "learning_status": "In Progress",
    "last_review_date": "2025-07-01T00:00:00Z",
    "scheduled_date": "2025-07-02T00:00:00Z"
  }
},
{
  "model": "flashcards.card",
  "pk": 85,
  "fields": {
    "question": "What is duck typing in Python?",
    "answer": "Duck typing is a concept where the type of an object is determined by its behavior (methods and properties) rather than its class. \"If it walks like a duck and quacks like a duck, it's a duck.\"",
    "card_deck": 28,
    "repetitions": 2,
    "difficulty": 5.4,
    "stability": 0.48999999999999994,
    "learning_status": "In Progress",
    "last_review_date": "2025-07-01T00:00:00Z",
    "scheduled_date": "2025-07-02T00:00:00Z"
  }
},
{
  "model": "flashcards.card",
  "pk": 86,
  "fields": {
    "question": "How do you handle exceptions in Python?",
    "answer": "Using try-except blocks. The try block contains code that might raise exceptions, and except blocks handle specific exceptions. Finally blocks execute regardless of whether an exception occurred.",
    "card_deck": 28,
    "repetitions": 1,
    "difficulty": 4.9,
    "stability": 1.4,
    "learning_status": "In Progress",
    "last_review_date": "2025-06-30T00:00:00Z",
    "scheduled_date": "2025-07-08T00:00:00Z"
  }
},
{
  "model": "flashcards.card",
  "pk": 87,
  "fields": {
    "question": "What are Python's magic/dunder methods?",
    "answer": "Special methods with double underscores (like `__init__`, `__add__`, `__len__`) that enable Python's core features and operator overloading. They allow classes to implement behavior for built-in operations.",
    "card_deck": 28,
    "repetitions": 2,
    "difficulty": 5.4,
    "stability": 0.48999999999999994,
    "learning_status": "In Progress",
    "last_review_date": "2025-07-01T00:00:00Z",
    "scheduled_date": "2025-07-02T00:00:00Z"
  }
},
{
  "model": "flashcards.card",
  "pk": 88,
  "fields": {
    "question": "What is the difference between `==` and `is` in Python?",
    "answer": "`==` compares the values of objects (equality). `is` compares the identity of objects (checks if they are the same object in memory).",
    "card_deck": 28,
    "repetitions": 2,
    "difficulty": 5.4,
    "stability": 0.48999999999999994,
    "learning_status": "In Progress",
    "last_review_date": "2025-07-01T00:00:00Z",
    "scheduled_date": "2025-07-02T00:00:00Z"
  }
},
{
  "model": "flashcards.card",
  "pk": 89,
  "fields": {
    "question": "Explain Python's inheritance and method resolution order (MRO).",
    "answer": "Inheritance allows a class to inherit attributes and methods from another class. MRO determines the order in which base classes are searched when looking for a method. Python uses C3 linearization algorithm for MRO.",
    "card_deck": 28,
    "repetitions": 2,
    "difficulty": 5.4,
    "stability": 0.48999999999999994,
    "learning_status": "In Progress",
    "last_review_date": "2025-07-01T00:00:00Z",
    "scheduled_date": "2025-07-02T00:00:00Z"
  }
},
{
  "model": "flashcards.card",
  "pk": 90,
  "fields": {
    "question": "What are Python closures?",
    "answer": "A closure is a function object that remembers values in enclosing scopes even if they are not present in memory. It occurs when a nested function references a value from its enclosing function.",
    "card_deck": 28,
    "repetitions": 2,
    "difficulty": 5.4,
    "stability": 0.48999999999999994,
    "learning_status": "In Progress",
    "last_review_date": "2025-07-01T00:00:00Z",
    "scheduled_date": "2025-07-02T00:00:00Z"
  }
},
{
  "model": "flashcards.card",
  "pk": 91,
  "fields": {
    "question": "What is the difference between shallow copy and deep copy?",
    "answer": "Shallow copy creates a new object but references the same elements. Deep copy creates a new object and recursively copies all nested objects. Use `copy.copy()` for shallow and `copy.deepcopy()` for deep copies.",
    "card_deck": 28,
    "repetitions": 2,
    "difficulty": 5.4,
    "stability": 0.48999999999999994,
    "learning_status": "In Progress",
    "last_review_date": "2025-07-01T00:00:00Z",
    "scheduled_date": "2025-07-02T00:00:00Z"
  }
},
{
  "model": "flashcards.card",
  "pk": 92,
  "fields": {
    "question": "Testing liek lwy",
    "answer": "test",
    "card_deck": 26,
    "repetitions": 0,
    "difficulty": 5.0,
    "stability": 1.0,
    "learning_status": "Unseen",
    "last_review_date": null,
    "scheduled_date": "2025-07-01T00:00:00Z"
  }
},
{
  "model": "flashcards.card",
  "pk": 93,
  "fields": {
    "question": "More testing",
    "answer": "getst",
    "card_deck": 28,
    "repetitions": 0,
    "difficulty": 5.0,
    "stability": 1.0,
    "learning_status": "Unseen",
    "last_review_date": null,
    "scheduled_date": "2025-07-01T00:00:00Z"
  }
},
{
  "model": "flashcards.card",
  "pk": 94,
  "fields": {
    "question": "Creating a new card",
    "answer": "Testing",
    "card_deck": 26,
    "repetitions": 0,
    "difficulty": 5.0,
    "stability": 1.0,
    "learning_status": "Unseen",
    "last_review_date": null,
    "scheduled_date": "2025-07-01T00:00:00Z"
  }
},
{
  "model": "flashcards.card",
  "pk": 95,
  "fields": {
    "question": "My lando",
    "answer": "Is the mando",
    "card_deck": 26,
    "repetitions": 0,
    "difficulty": 5.0,
    "stability": 1.0,
    "learning_status": "Unseen",
    "last_review_date": null,
    "scheduled_date": "2025-07-01T00:00:00Z"
  }
},
{
  "model": "flashcards.card",
  "pk": 96,
  "fields": {
    "question": "Even more testing",
    "answer": "hello",
    "card_deck": 26,
    "repetitions": 0,
    "difficulty": 5.0,
    "stability": 1.0,
    "learning_status": "Unseen",
    "last_review_date": null,
    "scheduled_date": "2025-07-01T00:00:00Z"
  }
},
{
  "model": "flashcards.card",
  "pk": 97,
  "fields": {
    "question": "fewf",
    "answer": "ewf",
    "card_deck": 26,
    "repetitions": 0,
    "difficulty": 5.0,
    "stability": 1.0,
    "learning_status": "Unseen",
    "last_review_date": null,
    "scheduled_date": "2025-07-02T00:00:00Z"
  }
},
{
  "model": "flashcards.card",
  "pk": 98,
  "fields": {
    "question": "Twegew",
    "answer": "ewfwe",
    "card_deck": 26,
    "repetitions": 0,
    "difficulty": 5.0,
    "stability": 1.0,
    "learning_status": "Unseen",
    "last_review_date": null,
    "scheduled_date": "2025-07-01T00:00:00Z"
  }
},
{
  "model": "flashcards.card",
  "pk": 99,
  "fields": {
    "question": "fsdfsdf",
    "answer": "fsdfsd",
    "card_deck": 26,
    "repetitions": 0,
    "difficulty": 5.0,
    "stability": 1.0,
    "learning_status": "Unseen",
    "last_review_date": null,
    "scheduled_date": "2025-07-01T00:00:00Z"
  }
},
{
  "model": "flashcards.card",
  "pk": 100,
  "fields": {
    "question": "ffewfw",
    "answer": "fwefwe",
    "card_deck": 26,
    "repetitions": 0,
    "difficulty": 5.0,
    "stability": 1.0,
    "learning_status": "Unseen",
    "last_review_date": null,
    "scheduled_date": "2025-07-01T22:50:51Z"
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 1,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 2,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 3,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 4,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 5,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 6,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 7,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 8,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 9,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 10,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 11,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 12,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 13,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 14,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 15,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 16,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 17,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 18,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 19,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 20,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 21,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 22,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 23,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 24,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 25,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 26,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 27,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 28,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 29,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 30,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 31,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 32,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 33,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 34,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 35,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 36,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 37,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 38,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 39,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 40,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 41,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 42,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 43,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 44,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 45,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 46,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 47,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 48,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 49,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 50,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 51,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 52,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 53,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 54,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 55,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 56,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 57,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 58,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 59,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 60,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 61,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 62,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 63,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 64,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 65,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 66,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 67,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 68,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 69,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 70,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 71,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 72,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 73,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 74,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 75,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 76,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 77,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 78,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 79,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 80,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 81,
  "fields": {
    "card": 24
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 82,
  "fields": {
    "card": 27
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 83,
  "fields": {
    "card": 28
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 84,
  "fields": {
    "card": 49
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 85,
  "fields": {
    "card": 50
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 86,
  "fields": {
    "card": 51
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 87,
  "fields": {
    "card": 52
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 88,
  "fields": {
    "card": 53
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 89,
  "fields": {
    "card": 54
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 90,
  "fields": {
    "card": 55
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 91,
  "fields": {
    "card": 56
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 92,
  "fields": {
    "card": 57
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 93,
  "fields": {
    "card": 58
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 94,
  "fields": {
    "card": 74
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 95,
  "fields": {
    "card": 75
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 96,
  "fields": {
    "card": 59
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 97,
  "fields": {
    "card": 60
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 98,
  "fields": {
    "card": 61
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 99,
  "fields": {
    "card": 62
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 100,
  "fields": {
    "card": 63
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 101,
  "fields": {
    "card": 64
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 102,
  "fields": {
    "card": 65
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 103,
  "fields": {
    "card": 66
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 104,
  "fields": {
    "card": 67
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 105,
  "fields": {
    "card": 68
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 106,
  "fields": {
    "card": 69
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 107,
  "fields": {
    "card": 70
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 108,
  "fields": {
    "card": 71
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 109,
  "fields": {
    "card": 72
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 110,
  "fields": {
    "card": 73
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 111,
  "fields": {
    "card": 76
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 112,
  "fields": {
    "card": 77
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 113,
  "fields": {
    "card": 78
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 114,
  "fields": {
    "card": 79
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 115,
  "fields": {
    "card": 80
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 116,
  "fields": {
    "card": 81
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 117,
  "fields": {
    "card": 82
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 118,
  "fields": {
    "card": 83
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 119,
  "fields": {
    "card": 84
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 120,
  "fields": {
    "card": 85
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 121,
  "fields": {
    "card": 86
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 122,
  "fields": {
    "card": 87
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 123,
  "fields": {
    "card": 88
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 124,
  "fields": {
    "card": 89
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 125,
  "fields": {
    "card": 90
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 126,
  "fields": {
    "card": 91
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 127,
  "fields": {
    "card": 77
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 128,
  "fields": {
    "card": 79
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 129,
  "fields": {
    "card": 81
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 130,
  "fields": {
    "card": 82
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 131,
  "fields": {
    "card": 83
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 132,
  "fields": {
    "card": 84
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 133,
  "fields": {
    "card": 85
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 134,
  "fields": {
    "card": 87
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 135,
  "fields": {
    "card": 88
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 136,
  "fields": {
    "card": 89
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 137,
  "fields": {
    "card": 90
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 138,
  "fields": {
    "card": 91
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 139,
  "fields": {
    "card": 50
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 140,
  "fields": {
    "card": 51
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 141,
  "fields": {
    "card": 52
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 142,
  "fields": {
    "card": 53
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 143,
  "fields": {
    "card": 54
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 144,
  "fields": {
    "card": 55
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 145,
  "fields": {
    "card": 56
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 146,
  "fields": {
    "card": 57
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 147,
  "fields": {
    "card": 58
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 148,
  "fields": {
    "card": 74
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 149,
  "fields": {
    "card": 75
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 150,
  "fields": {
    "card": 64
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 151,
  "fields": {
    "card": 65
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 152,
  "fields": {
    "card": 67
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 153,
  "fields": {
    "card": 68
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 154,
  "fields": {
    "card": 69
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 155,
  "fields": {
    "card": 70
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 156,
  "fields": {
    "card": 71
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 157,
  "fields": {
    "card": 72
  }
},
{
  "model": "flashcards.reviewlog",
  "pk": 158,
  "fields": {
    "card": 73
  }
},
{
  "model": "authentication.authuser",
  "pk": 3,
  "fields": {
    "password": "pbkdf2_sha256$600000$8VvC8Ydxss2DPqrwkMdcC6$RxQN6IY2b9/OM1HI6GCioeXH20E2A219T0eVDUAXjkk=",
    "last_login": "2025-07-01T18:41:29.734Z",
    "is_superuser": true,
    "email": "jaylenmc05@gmail.com",
    "is_active": true,
    "is_staff": true,
    "access_token_expires_at": "2025-04-19T15:05:46.802Z",
    "access_token": "ya29.a0AZYkNZiffDieBPOKihSS_VYQIE4vCyXzhz4BygW7n3Q4aZ4KtOHJ_SNyV1N4PQjOakGfHMES7CBEf2v5Z6ad2W-GFZmRAnLmC3n7-LthB0Jn_eGTcyha0IDOCv20jIruwnhG_CNBh5I7YpQpfZh0JXK1Btz0_wAeSGXDsW1CaCgYKAQoSARISFQHGX2Mi--YBLb9iK56IaNvLEfb-qg0175",
    "refresh_token": "1//04NVhNw5Eefi4CgYIARAAGAQSNwF-L9IrY4cGke98YvgJXY1xqrUu74SL_3qTAOSieuFpdnlz0FqeS3j0VmOW7UOfohXh_pU2rYk",
    "jwt_token": null,
    "timezone": "America/Chicago",
    "plan": "Free plan",
    "token_amount": 1000,
    "xp": 0,
    "level": 1,
    "groups": [],
    "user_permissions": []
  }
},
{
  "model": "authentication.authuser",
  "pk": 4,
  "fields": {
    "password": "",
    "last_login": "2025-04-19T14:04:03.550Z",
    "is_superuser": false,
    "email": "jazaleen57@gmail.com",
    "is_active": true,
    "is_staff": false,
    "access_token_expires_at": "2025-04-19T15:04:02.430Z",
    "access_token": "ya29.a0AZYkNZgIVwofbvO0Ot7M0BhZc2aCB8N5HCnFJbg8K5UGfs61IN5DRT99e3mRtVQqX4y4428s3lJ9RiEB_3E8YK7rKPtHcI9vzho2XX_IqWn_vikqPBVkvHubUCMR3IF4cTJOXhiIq5PQSZvR7jQjAcZIwO4ADW7nnb7zzZNyaCgYKAc8SARQSFQHGX2Mi1eXhO_A4Y8-rzPEcS5F8yg0175",
    "refresh_token": "1//04oODZBUzd3WCCgYIARAAGAQSNwF-L9Ir8VFtvSVRXDoSDUgE5QCmsP8h3s1FMlLt52CppJgmVT8AXjzHYBrQsZzhiw4GiGtNbao",
    "jwt_token": null,
    "timezone": "UTC",
    "plan": "Free plan",
    "token_amount": 1000,
    "xp": 0,
    "level": 1,
    "groups": [],
    "user_permissions": []
  }
},
{
  "model": "authentication.authuser",
  "pk": 9,
  "fields": {
    "password": "",
    "last_login": "2025-04-30T20:24:10.413Z",
    "is_superuser": false,
    "email": "hindubibu@gmail.com",
    "is_active": true,
    "is_staff": false,
    "access_token_expires_at": "2025-04-30T21:24:09.273Z",
    "access_token": "ya29.a0AZYkNZgBiqg4WZlNJLaKsE8DJJfGbQfHsA8pcFA_Ty5VDO2elI8tb1f8NOCpN-M3oLVdQoLndLCpzQ4KzKTiiWQHSdHhO9zXiRLHhlb4Q2FTIbDkx52-RkzgpT78edjH7UkyTYIeLi7UMu3mK6HhH0YxrwHKUajsaRgQY1ZxaCgYKAYASARUSFQHGX2MiklGyKKeTGhuPRJTOYHl4yQ0175",
    "refresh_token": "1//04So4LQ7G13LRCgYIARAAGAQSNwF-L9IrfiFwxNnmvHQuSs2UTKJMaS7LpJ2ii4e1AT5GOg0ORmdVHWoih2Tq_R18htp7FJshVc4",
    "jwt_token": null,
    "timezone": "UTC",
    "plan": "Free plan",
    "token_amount": 1000,
    "xp": 0,
    "level": 1,
    "groups": [],
    "user_permissions": []
  }
},
{
  "model": "authentication.authuser",
  "pk": 10,
  "fields": {
    "password": "",
    "last_login": "2025-07-01T22:47:17.567Z",
    "is_superuser": false,
    "email": "jayzilla195@gmail.com",
    "is_active": true,
    "is_staff": false,
    "access_token_expires_at": "2025-07-01T23:47:16.351Z",
    "access_token": "ya29.a0AS3H6Nyk66njhYXD3y08mxLD7jFlB9tvrV2uaRNvLZdYBktpVIT1h_pswwumP8dEr76afLkV8AHGsyTmjqiAHkufDmrrzdCshoPcf41Nl9rVq7EtjZqcvPQzdesdFpR4Sq06g-EKgaGfok-8AkRQk1JcDPcmu-6pTkv9Ta1xaCgYKATISARcSFQHGX2Mi1LrJHelaQ00UCX44JDS4fw0175",
    "refresh_token": "1//05H5dpr5IwC4NCgYIARAAGAUSNwF-L9IrZYhlHaiUEVGPaeVVwsP02nKSDh5emLH0YjJn4dSIAlgftRwOhWg9mfh9FZ9M_XeHTUg",
    "jwt_token": "REDACTED",
    "timezone": "UTC",
    "plan": "Note Taker",
    "token_amount": 1000,
    "xp": 12,
    "level": 3,
    "groups": [],
    "user_permissions": []
  }
}
]
